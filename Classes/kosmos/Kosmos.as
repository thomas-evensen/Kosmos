class kosmos.Kosmos{	var o_scene:Object;	var o_menu:Object;	var v_currProject;	var v_currPerson;	var s_currKosmos:String; // person / project 	var b_menuOut:Boolean;	var a_workers:Array;	var b_turned:Boolean;	var b_sliding:Boolean;		public function Kosmos()	{        v_currProject 	= "";		v_currPerson	= "";	    s_currKosmos	= "";			a_workers		= new Array();		b_turned		= false;		b_menuOut		= false;		b_sliding		= false;	}		public function addScene(p_x:Number,p_y:Number,p_z:Number,p_d:Number,p_f:Number)	{		o_scene = new kosmos.Scene(p_x,p_y,p_z,p_d,p_f);	}	public function get scene()	{	return o_scene;	}		public function addMenu(p_x:Number, p_y:Number, p_depth:Number)	{		o_menu = new kosmos.Menu(p_x,p_y,p_depth);		_root.addMenubarMouse();	}	public function get menu()	{	return o_menu;	}		public function personKosmos(p_id:Number, p_dur:Number)	{		if(b_sliding) return;		b_sliding = true;				// check if the table should be turned or not		if(v_currPerson.num == p_id && !b_turned)		b_turned = true;		else if(v_currPerson.num == p_id && b_turned)	b_turned = false;		else													{			b_turned = false;			_root.Kosmos.menu.el.mc_menu_bar_turntable.gotoAndStop(1);		}		// show the turntable option		_root.Kosmos.menu.el.mc_menu_bar_turntable._visible = true;		// set the new current project		v_currPerson = _root.Crew.person(_root.Crew.personList(p_id));		// set the current kosmos to be project		s_currKosmos = "person";				// remove worker dots		_root.Kosmos.removeWorkerDots();		_root.Kosmos.menu.setBarText();			// set new positions for the person kosmos		for(var i=0;i<_root.Crew.personList().length;i++)		{			if(i == p_id)			{				o_scene.member(i).newPos.x	= 0;				o_scene.member(i).newPos.y	= 0;				o_scene.member(i).newPos.z	= 0;							}			else			{				var F = _root.Crew.personList(i);								// if the table is turned or not				if(b_turned)	var R = _root.Crew.person(F).friend(v_currPerson.id).relation;				else			var R = v_currPerson.friend(F).relation;								o_scene.member(i).newPos.x	= Math.sin(i)*(R*35);				o_scene.member(i).newPos.y	= Math.cos(i)*(R*35);				o_scene.member(i).newPos.z	= -(R*20) + Math.random() * (R*40);			}		}					// move the dots to the new location		for(var i=0;i<_root.Crew.personList().length;i++)		{			o_scene.member(i).interval = setInterval(o_scene.member(i),"slideTo",15,p_dur)		}				}		public function projectKosmos(p_id:String, p_dur:Number)	{		// if kosmos is sliding...		if(b_sliding) return;				// if this is already the active project and it's in the project kosmos		if(v_currProject.id == p_id&&s_currKosmos=="project") return;				// activate thew sliding flag		b_sliding = true;				// set the new current project		v_currProject = _root.Crew.project(p_id);				// if already in projectKosmos..no need to move dots		if(s_currKosmos != "project")		{			// set new positions for the project kosmos			for(var i=0;i<_root.Crew.personList().length;i++)			{				o_scene.member(i).newPos.x	= -150 + Math.random() * 300;				o_scene.member(i).newPos.y	= -150 + Math.random() * 300;				o_scene.member(i).newPos.z	= -150 + Math.random() * 300;			}						// move the dots to the new location			for(var i=0;i<_root.Crew.personList().length;i++)			{				o_scene.member(i).interval = setInterval(o_scene.member(i),"slideTo",15,p_dur)			}			}		// if already in kosmos... set the slide variable manually to false		else		{			b_sliding = false;		}				_root.Kosmos.removeWorkerDots();		_root.Kosmos.setWorkerDots();				// set the current kosmos to be project		s_currKosmos = "project";				// hide the turntable option		_root.Kosmos.menu.el.mc_menu_bar_turntable._visible = false;				_root.Kosmos.menu.setBarText();	}		public function rotate()	{		//o_scene.interval = setInterval(o_scene,"rotate", 15);	}			// remove current projectmembers		public function removeWorkerDots()	{		if(a_workers.length!=0)		{			for(var i=0; i<a_workers.length;i++)			{				o_scene.member(a_workers[i]).el.mc_dot.mc_worked._visible = false;			}			a_workers = new Array();		}		}	// set projectmembers	public function setWorkerDots()	{		var workers = _root.Crew.project(v_currProject.id).worker().listStuff();				for(var i=0;i<workers.length;i++)		{			var num = _root.Crew.person(workers[i]).num;			o_scene.member(num).el.mc_dot.mc_worked._visible = true;				a_workers[i] = num;			}		}	public function get currProject()					{ return v_currProject;	}	public function set currProject(p_s):Void			{ v_currProject = p_s;	}	public function get currPerson()					{ return v_currPerson;	}	public function set currPerson(p_s):Void			{ v_currPerson = p_s;	}	public function get currKosmos():String				{ return s_currKosmos;	}	public function set currKosmos(p_s:String):Void		{ s_currKosmos = p_s;	}	public function get turned():Boolean				{ return b_turned;		}	public function set turned(p_b:Boolean)				{ b_turned = p_b;		}	public function get menuOut():Boolean				{ return b_menuOut;		}	public function set menuOut(p_b:Boolean)			{ b_menuOut = p_b;		}	public function get sliding():Boolean				{ return b_sliding;		}	public function set sliding(p_b:Boolean)			{ b_sliding = p_b;		}}